;; auto generated by emacs
;; -----------------------
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("cca1d386d4a3f645c2f8c49266e3eb9ee14cf69939141e3deb9dfd50ccaada79" default))
 '(menu-bar-mode nil)
 '(package-selected-packages
   '(counsel expand-region ivy ivy-posframe undo-tree use-package vterm ws-butler copilot editorconfig dash s quelpa-use-package quelpa))
 '(scroll-bar-mode nil)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Menlo" :foundry "outline" :slant normal :weight bold :height 120 :width expanded)))))

;; package manager
;; ---------------
(require 'package)
(require 'use-package)
(require 'quelpa)
(require 'quelpa-use-package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

;; use-package
;; -----------
;; ivy for common emacs commands
(use-package counsel
             :after ivy
             :config (counsel-mode))

;; floating frame for ivy
(use-package ivy-posframe
             :after ivy
             :config (ivy-posframe-mode))

;; nicer completion
(use-package ivy
             :config (ivy-mode))

;; remove white space when saving in prog mode
(use-package ws-butler
             :config (add-hook 'prog-mode-hook #'ws-butler-mode))

;; Copilot config
(use-package copilot
             :quelpa (copilot :fetcher github
			      :repo "zerolfx/copilot.el"
			      :branch "main"
			      :files ("dist" "*.el"))
	     :config (progn
		       (define-key copilot-mode-map (kbd "C-S-<return>")
				   #'copilot-accept-completion)
		       (define-key copilot-mode-map (kbd "C-S-<right>")
				   #'copilot-accept-completion-by-word)
		       (define-key copilot-mode-map (kbd "C-S-<down>")
				   #'copilot-accept-completion-by-line)
		       (define-key copilot-mode-map (kbd "C-S-<up>")
				   #'copilot-next-completion)
		       (define-key copilot-mode-map (kbd "C-S-<left>")
				   #'copilot-previous-completion))
	     :init (global-copilot-mode))

;; restore window config
(use-package winner
             :config (winner-mode))


;; theme
;; -----
;; pieces stolen from `modus-vivendi-tainted`
(setq modus-themes-vivendi-color-overrides '(
    (bg-hl-line . "#303a6f")
    (bg-inactive . "#2b3045")
    ;; (bg-main . "#0d0e1c")            ; background from vivendi-tainted
    (bg-main . "#0d1117")))             ; background from github
(load-theme 'modus-vivendi)

;; configs
;; -------
(setq line-number-mode t)
(setq column-number-mode t)
(setq visible-bell t)
(setq-default show-trailing-whitespace t)
(setq-default indent-tabs-mode nil)     ; use spaces instead of tabs
(require 'em-alias)
(setq eshell-command-aliases-list
      (append (list (eshell/alias "fg" "winner-undo"))))


;; keybinds
;; --------
(global-set-key (kbd "C-c C-g") 'goto-line)
(global-set-key (kbd "C-v") 'er/expand-region)
(global-set-key (kbd "C-x m") 'eshell)  ; replace compose-mail
(global-set-key (kbd "M-S-<up>") 'enlarge-window)
(global-set-key (kbd "M-S-<down>") 'shrink-window)
(global-set-key (kbd "M-S-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "M-S-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-z") (lambda ()
                              "Emulate C-z in GUI mode."
			      (interactive)
			      (if (display-graphic-p)
				  (eshell)
				  (suspend-frame))))


;; Stash all the ~ files in one place, stolen from emacs-bedrock.
;; --------------------------------------------------------------
(defun bedrock--backup-file-name (fpath)
  "Return a new file path of a given file path.
If the new path's directories does not exist, create them."
  (let* ((backupRootDir "~/.emacs.d/emacs-backup/")
         (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path
         (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") )))
    (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
    backupFilePath))
(setq make-backup-file-name-function 'bedrock--backup-file-name)
